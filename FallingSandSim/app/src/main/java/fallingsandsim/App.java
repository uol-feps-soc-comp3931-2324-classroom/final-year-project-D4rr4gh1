/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package fallingsandsim;

import java.util.Timer;
import java.util.TimerTask;
import javax.swing.*;
import java.awt.*;

public class App {

    // Define our class members
    private static Population p;

    public static void main(String[] args) {

        // Create a new population with the given width and height
        p = new Population(600, 400);

        // Create our GUI for the application
        JFrame frame = new JFrame("Falling Sand Simulation");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(p.width, p.height);

        // Create our buttons for the different states
        JButton waterButton = new JButton("Water");
        JButton sandButton = new JButton("Sand");
        JButton stoneButton = new JButton("Stone");
        
        gamePanel panel = new gamePanel();
        panel.setLayout(new BorderLayout());


        // Add action listeners to the buttons so that we can change the draw state
        waterButton.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                panel.setDrawState(State.WATER);
            }
        });

        sandButton.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                panel.setDrawState(State.SAND);
            }
        });

        stoneButton.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                panel.setDrawState(State.STONE);
            }
        });

        // Create a panel for the buttons and add them to it
        JPanel buttonPanel = new JPanel();
        buttonPanel.setLayout(new FlowLayout(FlowLayout.RIGHT));
        buttonPanel.add(waterButton);
        buttonPanel.add(sandButton);
        buttonPanel.add(stoneButton);

        frame.setLayout(new BorderLayout());
        frame.add(buttonPanel, BorderLayout.NORTH);
        frame.add(panel, BorderLayout.CENTER);

        frame.pack();
        frame.setVisible(true);

        // Set up our timer for repeatedly running the evolution function
        Timer timer = new Timer();

        // The function that will be called continually, it gets the new,
        // evolved population from the ruleset and sets it to the classes
        // population member. It then redraws the UI to match the new population.
        TimerTask doThing = new TimerTask() {
            @Override
            public void run() {
                p = p.evolve();
                panel.repaint();
            }  
        }; 


        timer.scheduleAtFixedRate(doThing, 0, 100);
    }


    // This class is implemented to create the panel to be drawn on, this 
    // requires extending the JPanel class so that the paint method can 
    // be adjusted to implement our new logic as to what should be drawn.
    static class gamePanel extends JPanel {
        private int lastX, lastY;
        private javax.swing.Timer timer;
        private State drawState = State.SAND;
        
        public gamePanel(){
            setPreferredSize(new Dimension(p.width, p.height));
            setBackground(Color.BLACK);

            // Create a timer to handle the mouse being held down
            timer = new javax.swing.Timer(100, new java.awt.event.ActionListener() {
                @Override
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    handleMouse(lastX, lastY);
                }
            });

            // Add mouse listeners to the panel, so that the user can 
            // interact with the simulation
            addMouseListener(new java.awt.event.MouseAdapter() {
                @Override
                public void mousePressed(java.awt.event.MouseEvent evt) {
                    lastX = evt.getX();
                    lastY = evt.getY();
                    timer.start();
                }

                @Override
                public void mouseReleased(java.awt.event.MouseEvent evt) {
                    timer.stop();
                }

                @Override
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    handleMouse(evt.getX(), evt.getY());
                }
            });

            addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
                @Override
                public void mouseDragged(java.awt.event.MouseEvent evt) {
                    handleMouse(evt.getX(), evt.getY());
                }
            });
        }

        // This function is used to handle the mouse being clicked or dragged
        public void handleMouse(int x, int y){
            if(p.getCell(x, y).state == State.EMPTY){
                p.setCell(x, y, new Cell(drawState));
            }
        }

        // This function is used to set the draw state of the panel
        public void setDrawState(State state){
            drawState = state;
        }
        

        // This function is used to paint the panel, it will draw the cells
        @Override
        public void paint(Graphics g){
            super.paint(g);

            for (int x = 0; x < p.width; x++) {
                for (int y = 0; y < p.height; y++) {

                    switch(p.getCell(x, y).state){
                        case SAND:
                            g.setColor(Color.YELLOW);
                            g.drawLine(x, y, x, y);
                            break;
                        case STONE:
                            g.setColor(Color.GRAY);
                            g.drawLine(x, y, x, y);
                            break;
                        case WATER:
                            g.setColor(Color.BLUE);
                            g.drawLine(x, y, x, y);
                            break;
                        case EMPTY:
                            g.setColor(Color.BLACK);
                            g.drawLine(x, y, x, y);
                            break;
                    }
                }
            }
        }
    }
}
